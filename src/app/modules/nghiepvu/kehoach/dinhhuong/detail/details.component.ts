import { Component, ElementRef, OnDestroy, OnInit, ViewChild, ViewEncapsulation } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { Subscription, takeUntil, timeout, Subject } from 'rxjs';
import { AbstractControl, FormArray, FormBuilder, FormGroup, RequiredValidator, UntypedFormBuilder, UntypedFormGroup, Validators } from '@angular/forms';
import { MessageService } from 'app/shared/message.services';
import { SnotifyToast } from 'ng-alt-snotify';
import { State } from 'app/shared/commons/conmon.types';
import { BaseDetailInterface } from 'app/shared/commons/basedetail.interface';
import { UserService } from 'app/core/user/user.service';
import { BaseComponent } from 'app/shared/commons/base.component';
import { FunctionService } from 'app/core/function/function.service';
import { ListdinhhuongService } from '../listdinhhuong.service';
import { MatTableDataSource } from '@angular/material/table';
import { MatSort } from '@angular/material/sort';
import { ServiceService } from 'app/shared/service/service.service';
import { MatDialog } from '@angular/material/dialog';
import { PopupFileComponent } from 'app/shared/component/popup-file/popup-filecomponent';
import { PopupCbkhComponent } from './popup-cbkh/popup-cbkh.component';
import { User } from 'app/core/user/user.types';
import { DOfficeService } from 'app/shared/service/doffice.service'
import { DOfficeComponent } from 'app/shared/component/d-office/d-office.component';
import { ViewFileComponent } from 'app/shared/component/view-file/view-file.component';

@Component({
    selector: 'component-details',
    templateUrl: './details.component.html',
    styleUrls: ['./details.component.css'],
    encapsulation: ViewEncapsulation.None,
})

export class ApiDinhHuongDetailsComponent implements OnInit {

    public selectedYear: number;
    public selectedStatus: string;
    public actionClick: string = null;
    public getYearSubscription: Subscription;
    public getStatusSubscription: Subscription;
    public listYears = [];
    public listStatus = [];
    public showTable = true
    public form;
    public dataImport = {
        arr: []
    }
    @ViewChild('fileUpload2') fileUpload2: ElementRef;
    public idParam: string = null;
    public checkChiTiet: string = null;
    public listDonvi = [];
    public listChiTietImport = [];
    submitted = { check: false };
    public listFile;
    public listFileDelete = [];
    public actionType: string = null;
    public makehoach: string = null;
    public screen;
    public checkDOffice = false;
    public linkDoffice = "";
    user: User;
    private _unsubscribeAll: Subject<any> = new Subject<any>();
    constructor(
        private _formBuilder: FormBuilder,
        public _activatedRoute: ActivatedRoute,
        public _router: Router,
        private _serviceApi: ServiceService,
        public _messageService: MessageService,
        public dialog: MatDialog,
        private _userService: UserService,
        private _dOfficeApi: DOfficeService,
    ) {
        this.idParam = this._activatedRoute.snapshot.paramMap.get('id');
        this._activatedRoute.queryParams.subscribe(params => {
            this.checkChiTiet = params["type"];
            this.updateKeHoach();
            if (params?.type) {
                this.actionType = params?.type;
            } else {
                this.actionType = null;
            }
            if (params?.screen) {
                this.screen = params?.screen;
            }
            if (params?.makehoach) {
                this.makehoach = params?.makehoach;
            } else {
                this.makehoach = null;
            }
            this.initForm()
            if (this.actionType == "THEMMOI") {
                this._serviceApi.dataKeHoach.next({capTao:'DONVI'});
                this.getCheckQuyenDoffice();

            }else if(this.actionType == "CHINHSUA"){
                this.getCheckQuyenDoffice();
            }
        }
        )

    }


    ngOnInit() {
        this.geListYears()
        // this.getListStatus()
        this.geListNhomDonVi();
        this.selectedYear = (new Date()).getFullYear();
        // console.log(this.form.value);
        this.getCheckQuyenDoffice()

    }

    
    getCheckQuyenDoffice() {
        this._userService.user$
            .pipe(takeUntil(this._unsubscribeAll))
            .subscribe((user: any) => {
                this.user = user;
                this._serviceApi.execServiceLogin("3FADE0E4-B2C2-4D9D-A0C7-06817ADE4FA3", [{ "name": "ORGID", "value": user.ORGID }]).subscribe((data) => {
                    if (data.data.API_DOFFICE) {
                        this.checkDOffice = true;
                        this.linkDoffice = data.data.API_DOFFICE;
                    }
                })
            });

    }

    geListNhomDonVi() {
        this._serviceApi.execServiceLogin("030A9A96-90D5-4AD0-80E4-C596AED63EE7", null).subscribe((data) => {
            this.listDonvi = data.data || [];
        })
    }

    initForm() {
        // if(this.idParam != undefined && this.idParam !=''){
        //     this.getYearSubscription = this._serviceApi.execServiceLogin("B73269B8-55CF-487C-9BB4-99CB7BC7E95F", [{"name":"MA_KE_HOACH","value":this.idParam}]).subscribe((data) => {
        //         this.form = this._formBuilder.group({
        //             name: [data.data.TEN_KE_HOACH, [Validators.required]],
        //             year: [data.data.NAM, [Validators.required]],
        //             maKeHoach:this.idParam
        //         }
        //         )
        //     })

        // }else{
        this.form = this._formBuilder.group({
            name: [null, [Validators.required]],
            year: [(new Date()).getFullYear(), [Validators.required]],
            maKeHoach: this.idParam,
            listChiTietImport: [],
            
        }
        )
        // }

    }

    updateKeHoach() {
        if (this.idParam != undefined && this.idParam != null) {
            this._serviceApi.execServiceLogin("DC2F3F51-09CC-4237-9284-13EBB85C83C1", [{ "name": "MA_KE_HOACH", "value": this.idParam }]).subscribe((data) => {
                console.log(data.data);
                this._serviceApi.dataKeHoach.next(data.data);
                this.listFile = data.data || [];
                this.listFile = data.data.listFile;
                this.form.get("name").patchValue(data.data.name);
                this.form.get("year").patchValue(data.data.nam);
                this.form.get("maKeHoach").patchValue(this.idParam);
                if (this.listFile != null && this.listFile.length > 0) {
                    for (let i = 0; i < this.listFile.length; i++) {

                        this.listupload.push({
                            fileName: this.listFile[i].fileName,
                            base64: this.listFile[i].base64,
                            duongDan: this.listFile[i].duongDan,
                            size: this.listFile[i].size,
                            sovanban: this.listFile[i].sovanban,
                            mafile: this.listFile[i].mafile
                        });
                    }
                }

            })


        }

    }

    get f(): { [key: string]: AbstractControl } {
        return this.form.controls;
    }



    geListYears() {
        var obj = { "NAME": 0, "ID": 0 };
        var year = (new Date()).getFullYear();
        var yearStart = year - 4;
        var yearEnd = yearStart + 10;
        for (let i = yearStart; i <= yearEnd; i++) {
            obj = { "NAME": i, "ID": i }
            this.listYears.push(obj);
        }
        this.selectedYear = (new Date()).getFullYear();

    }

    // getListStatus() {
    //     this.getStatusSubscription = this._serviceApi.execServiceLogin("E5050E10-799D-4F5F-B4F2-E13AFEA8543B", null).subscribe((data) => {
    //         this.listStatus = data.data || [];
    //     })
    // }
    downloadExcel() {
        let data ="";
        this.downloadTempExcel(data, "MAU_DANG_KY_DINH_HUONG.xlsx");
        //this._serviceApi.execServiceLogin("B186CEDA-876B-4511-96D1-E199926A6913", [{ "name": "ORGID", "value": "115" }]).subscribe((data) => {
         //   this.downloadTempExcel(data.data, "MAU_DANG_KY_DINH_HUONG.xlsx");
      //  })
    }

    importFile(event) {
        this.showTable = false
        const file = event.target.files[0];
        const formTem = this.form.value;
        this.form = this._formBuilder.group({
            name: [formTem.name, [Validators.required]],
            year: [formTem.year, [Validators.required]],
            maKeHoach: this.idParam,
            listChiTietImport: [],
        }
        )

        const reader = new FileReader();
        reader.readAsDataURL(file);
        reader.onload = () => {
            let fileBase64 = reader.result.toString().split(',')[1];
            this._serviceApi.execServiceLogin("1E707636-93B5-43EA-97BC-2F850C14D1E3", [{ "name": "ORGID", "value": "115" }, { "name": "FILE_UPLOAD", "value": fileBase64 }]).subscribe((data) => {
              
                let arr = data.data || [];
                let capTao = "DONVI";
                if (this.listDonvi != null && this.listDonvi.length > 0) {
                    capTao = 'TCT';
                }
                let kehoach = {
                    capTao: capTao,
                    listKeHoach: arr
                };
                this._serviceApi.dataKeHoach.next(kehoach);
                this.listChiTietImport = data.data || [];
                this.showTable = true
            })
        };
    }




    downloadTempExcel(userInp, fileName) {
        var mediaType = "data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,";
        // var userInp = document.getElementById('base64input');
        // var userInp = "";
        // //var a = document.createElement('a');
        // a.href = mediaType+userInp;
        //a.href = mediaType+userInp;
        const downloadLink = document.createElement('a');
        //const fileName = 'sample.excel';

        downloadLink.href = mediaType + userInp;
        downloadLink.download = fileName;
        downloadLink.click();
    }

    ngOnDestroy() {
        // this.getYearSubscription.unsubscribe();
        //this.getStatusSubscription.unsubscribe();
    }

    onSubmit(status) {
        this.submitted.check = true;
        if (this.form.invalid || this.listupload.length == 0) {
            this._messageService.showWarningMessage("Thông báo", "Chưa nhập đủ trường bắt buộc!")
            return;
        }
        console.log(this.form);
        let name = this.form.value.name;
        let nam = this.form.value.year;

       // let capTao = 'DONVI';
       // if (this.listDonvi != undefined && this.listDonvi.length > 0) {
       //     capTao = "TCT";
       // }
        let listChiTiet = [];
        let listFile = this.listupload;
        let kehoach = { name: name, nam: nam, maTrangThai: status, maKeHoach: this.idParam };
        for (let i = 0; i < this.form.value.listNhiemVu.length; i++) {
            let chitiet1 = this.form.value.listNhiemVu[i];
            for (let j = 0; j < chitiet1.listNhiemVu_cap2.length; j++) {
                let chitiet2 = chitiet1.listNhiemVu_cap2[j];
                if (chitiet2.chiTiet == 0) {
                    listChiTiet.push(chitiet2);
                }
                if (chitiet2 != null && chitiet2.listNhiemVu_cap3 != undefined && chitiet2.listNhiemVu_cap3.length > 0) {
                    for (let k = 0; k < chitiet2.listNhiemVu_cap3.length; k++) {
                        let chitiet3 = chitiet2.listNhiemVu_cap3[k];
                        if (chitiet3.chiTiet == 0) {
                            listChiTiet.push(chitiet3);
                        }
                        if (chitiet3.listNhiemVu_cap4 != undefined && chitiet3.listNhiemVu_cap4.length > 0) {
                            for (let i = 0; i < chitiet3.listNhiemVu_cap4.length; i++) {
                                let chitiet4 = chitiet3.listNhiemVu_cap4[k];
                                if (chitiet4.chiTiet == 0) {
                                    listChiTiet.push(chitiet4);
                                }
                            }
                        }

                    }
                }
               

                // if (this.listDonvi != undefined && this.listDonvi.length > 0) {
                //     for (let k = 0; k < chitiet2.listNhiemVu_cap3.length; k++) {
                //         let itemChiTiet = chitiet2.listNhiemVu_cap3[k];

                //         if (itemChiTiet.listNhiemVu_cap4 != undefined && itemChiTiet.listNhiemVu_cap4.length > 0) {
                //             for (let i = 0; i < itemChiTiet.listNhiemVu_cap4.length; i++) {

                //                 listChiTiet.push(itemChiTiet.listNhiemVu_cap4[i]);
                //             }
                //         }
                //     }
                // } else {

                //     if (chitiet2.listNhiemVu_cap3 != undefined && chitiet2.listNhiemVu_cap3.length > 0) {
                //         for (let i = 0; i < chitiet2.listNhiemVu_cap3.length; i++) {

                //             listChiTiet.push(chitiet2.listNhiemVu_cap3[i]);
                //         }
                //     }
                // }


            }
        }
        if(status=='CHO_PHE_DUYET' && listChiTiet.length ==0){
            this._messageService.showWarningMessage("Thông báo", "Vui lòng thêm thông tin đăng ký định hướng.");
            return;
        }
   
        var token = localStorage.getItem("accessToken");
        this._serviceApi.execServiceLogin("404ABE65-3B92-448F-A8F0-9543503AE1E3", [{ "name": "LIST_FILE", "value": JSON.stringify(listFile) }, { "name": "LIST_KE_HOACH_CHI_TIET", "value": JSON.stringify(listChiTiet) }, { "name": "TOKEN_LINK", "value": "Bearer " + token }, { "name": "KE_HOACH", "value": JSON.stringify(kehoach) }]).subscribe((data) => {
            // this._messageService.showSuccessMessage("Thông báo", data.message);
            // this._router.navigateByUrl('nghiepvu/kehoach/dinhhuong');
            switch (data.status) {
                case 1:
                    this._messageService.showSuccessMessage("Thông báo", "Thành công");
                    if (this.screen) {
                        this._router.navigateByUrl(this.screen);
                    } else {
                        this._router.navigateByUrl('nghiepvu/kehoach/dinhhuong');
                    }
                    break;
                case 0:
                    this._messageService.showErrorMessage("Thông báo", "Không tìm thấy bản ghi");
                    break;
                case -1:
                    this._messageService.showErrorMessage("Thông báo", "Xảy ra lỗi khi thực hiện");
                    break;
            }
        })
    }
    listupload = []
    handleUpload(event) {
        for (var i = 0; i < event.target.files.length; i++) {
            const reader = new FileReader();
            let itemVal = event.target.files[i];
            reader.readAsDataURL(event.target.files[i]);
            reader.onload = () => {
                this.listupload.push({
                    fileName: itemVal.name,
                    base64: reader.result,
                    size: itemVal.size,
                    sovanban: "",
                    mafile: ""
                });
            };
        }
        event.target.value = null;

    }

    resetFileUploader() {
        this.fileUpload2.nativeElement.value = null;
    }
    dataFile = [];
    openAlertDialog(type) {
    
        let data = this.dialog.open(DOfficeComponent, {
            data: {
                type: type,
                linkApi: this.linkDoffice,
                maDv: this.user.ORGID,
            },
            width: '800px',
            panelClass: 'custom-PopupCbkh',
            position: {
                top: '100px',
            }
        });
        data.afterClosed().subscribe((data) => {
            //if (type == 'DOFFICE') {
            this.dataFile = this._dOfficeApi.execTimKiemTheoFile(this.linkDoffice, data.ID_VB).then(data=>{
                console.log(data.body.Data);
              
                //this.listDOffice =data.body.Data;
                if (this.dataFile != null && this.dataFile.length > 0) {

                    for (var i = 0; i < this.dataFile.length; i++) {
                        let dataBase64 = this._dOfficeApi.execFileBase64(this.linkDoffice, this.dataFile[i].ID_FILE, this.user.ORGID, this.dataFile[i].ID_VB);
                        this.listupload.push({
                            fileName: this.dataFile[i].TEN_FILE,
                            base64: dataBase64,
                            size: 0,
                            sovanban: data.KY_HIEU,
                            mafile: ""
                        })
                    }
                }
              });
           
        })
    }


    exportMau() {
        if (this.idParam != undefined && this.idParam != null) {
            this._serviceApi.execServiceLogin("FC95C3F7-942F-4C7E-88D7-46E12BFE9185", [{ "name": "MA_KE_HOACH", "value": this.idParam }]).subscribe((data) => {
                this.downloadTempExcel(data.data, "DANH_SACH_DANG_KY_DINH_HUONG.docx");

           })
        } else {
            this._messageService.showWarningMessage("Thông báo", "Chức năng này không được sử dụng.");
        }
    }

    downLoadFile(item) {
        // var ext = item.fileName.substring(item.fileName.lastIndexOf(".") + 1);
        // if(ext =='pdf'){
        //         window.open(url, "_blank");
        // }   
        if (item.base64 != undefined && item.base64 != '') {
            let link = item.base64.split(',');
            let url = '';
            if (link.length > 1) {
                url = link[1];
            } else {
                url = link[0];
            }
            this.downloadAll(url, item.fileName);
        } else {
            var token = localStorage.getItem('accessToken');
            this._serviceApi
                .execServiceLogin('2269B72D-1A44-4DBB-8699-AF9EE6878F89', [
                    {name: 'DUONG_DAN', value: item.duongdan},
                    {name: 'TOKEN_LINK', value: 'Bearer ' + token},
                ])
                .subscribe((data) => {
                });
        }
    }

   async downloadAll(base64String, fileName){
    let typeFile =  await this.detectMimeType(base64String, fileName);
    let mediaType = `data:${typeFile};base64,`;
    const downloadLink = document.createElement('a');
        downloadLink.href = mediaType + base64String;
        downloadLink.download = fileName;
        if(typeFile == 'application/pdf'){
        this.openAlertDialogViewFile(downloadLink.href)// popup view file pdf
        }else{
            downloadLink.click();
        }
    }

   async detectMimeType(base64String, fileName) {
        var ext = fileName.substring(fileName.lastIndexOf(".") + 1);
        if (ext === undefined || ext === null || ext === "") ext = "bin";
        ext = ext.toLowerCase();
        const signatures = {
          JVBERi0: "application/pdf",
          R0lGODdh: "image/gif",
          R0lGODlh: "image/gif",
          iVBORw0KGgo: "image/png",
          TU0AK: "image/tiff",
          "/9j/": "image/jpg",
          UEs: "application/vnd.openxmlformats-officedocument.",
          PK: "application/zip",
        };
        for (var s in signatures) {
          if (base64String.indexOf(s) === 0) {
            var x = signatures[s];
            // if an office file format
            if (ext.length > 3 && ext.substring(0, 3) === "ppt") {
              x += "presentationml.presentation";
            } else if (ext.length > 3 && ext.substring(0, 3) === "xls") {
              x += "spreadsheetml.sheet";
            } else if (ext.length > 3 && ext.substring(0, 3) === "doc") {
              x += "wordprocessingml.document";
            }
            // return
            return x;
          }
        }
        // if we are here we can only go off the extensions
        const extensions = {
          xls: "application/vnd.ms-excel",
          ppt: "application/vnd.ms-powerpoint",
          doc: "application/msword",
          xml: "text/xml",
          mpeg: "audio/mpeg",
          mpg: "audio/mpeg",
          txt: "text/plain",
        };
        for (var e in extensions) {
          if (ext.indexOf(e) === 0) {
            var xx = extensions[e];
            return xx;
          }
        }
        // if we are here – not sure what type this is
        return "unknown";
      }

    deleteItemFile(items) {
        if (items.mafile != undefined && items.mafile != '') {
            this.listupload = this.listupload.filter(item => item.mafile != items.mafile);
        } else {
            this.listupload = this.listupload.filter(item => item.fileName != items.fileName);
        }
        if (items.mafile != null && items.mafile != '') {
            this.listFileDelete.push(items);
            // this._serviceApi.execServiceLogin("83C28EE1-6A5A-4ADA-B866-287EBAC8B5D5", [{"name":"MA_FILE","value":items.mafile}]).subscribe((data) => {

            // })
        }
    }

    async openAlertDialogDoffice(type, item?: any) {
        let data = this.dialog.open(DOfficeComponent, {
            data: {
                type: type,
                linkApi: this.linkDoffice,
                maDv: this.user.ORGID,
                message: 'HelloWorld',
                buttonText: {
                    cancel: 'Done',
                },
            },
            width: '800px',
            panelClass: 'custom-PopupCbkh',
            position: {
                top: '100px',
            },
        });

         data.afterClosed().subscribe((data) => {
           let kyHieu =data.data.KY_HIEU;
           let ngayVB =data.data.NGAY_VB;
           //item.get("sovanban").setValue(kyHieu);
           //item.get("ngayVanBan").setValue(ngayVB);
            if (type == 'DOffice') {
                  this._dOfficeApi.execTimKiemTheoFile(this.linkDoffice, data.data.ID_VB).then(data=>{
                this.dataFile = data.body.Data;
                console.log("thong tin file");
                console.log(data);
                if (this.dataFile != null && this.dataFile.length > 0) {
                   for (var i = 0; i < this.dataFile.length; i++) {
                    this.getFileFromDoffice(item, this.dataFile[i].ID_FILE, this.user.ORGID, this.dataFile[i].ID_VB,
                         this.dataFile[i].TEN_FILE, this.dataFile[i].KY_HIEU);
                //         let dataFile =  this.dataFile[i];
                //         setTimeout(() => {
                            
                     
                   
                // }, 1000);
                //     }
                }
            }
            }); 
            }
        });
    }
    async getFileFromDoffice(item,idFile,orgId,idVB,tenFile,kyHieu){
        this._dOfficeApi.execFileBase64(this.linkDoffice, idFile, orgId, idVB).then(data=>{
            console.log("file base64");
            var base64str = data.body;
            var decoded = atob(base64str);
             this.listupload.push({
                fileName: tenFile,
                base64: base64str,
                size: decoded.length,
                sovanban: kyHieu,
                mafile: ""
             })
            });
            
    }


    async openAlertDialogViewFile(base64) {
        let data = this.dialog.open(ViewFileComponent, {
            data: {
                file: base64,
            },
            width: '1000px',
            panelClass: 'custom-Popupviewfile',
            position: {
                top: '1px',
            },
        });
    }

    // addListDocChildView(tenFile,base64str,decoded,kyHieu) {
    //     return this._formBuilder.group({
    //         fileName: tenFile,
    //         base64: base64str,
    //         size: decoded.length,
    //         sovanban: kyHieu,
    //         mafile: ""
    //     });
    // }
 

}
